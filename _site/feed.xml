<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-20T15:27:13+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">James Hawk</title><subtitle>Engine Programmer at CCP Games, working on EVE Online. Indie developer working on HawkEngine and PS1 style 3D platformer. Unity 3D asset creator. Interesting guy.</subtitle><entry><title type="html">Vertical slice postmortem for Chaos the devil.</title><link href="http://localhost:4000/indiedev/update/2021/09/02/vertical-slice-postmortem.html" rel="alternate" type="text/html" title="Vertical slice postmortem for Chaos the devil." /><published>2021-09-02T10:45:19+00:00</published><updated>2021-09-02T10:45:19+00:00</updated><id>http://localhost:4000/indiedev/update/2021/09/02/vertical-slice-postmortem</id><content type="html" xml:base="http://localhost:4000/indiedev/update/2021/09/02/vertical-slice-postmortem.html">&lt;p&gt;&lt;img src=&quot;/assets/Images/Blog/VerticalSlice.jpg&quot; alt=&quot;Chaos the devil vertical slice screens&quot; class=&quot;blog-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is done, the game has reached vertical slice. The journey to this point was relatively smooth, but there were lots of design changes along the way as I decided to have a flexible game design.&lt;/p&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The physics look great!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Images/Blog/PhysicsTooGood.jpg&quot; alt=&quot;Chaos the devil pre alpha physics&quot; class=&quot;blog-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using Bullet Physics for my physics implementation gave great results. The player could run around with good looking momentum, kick down doors which would rebound slightly on impact and kick down walls of cubes which would dance around the screen. It was quite fun running around that little physics scene. Just one problem, physics like this doesn’t belong in a PS1 style game.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;This was my first experience of Bullet Physics and to be honest I fell into a developer trap and got a little carried away. Before I knew it I had ended up deviating quite far from the type of game I set out to do. I didn’t want to change the aim and come up with a new idea such as.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‘A modern take on the old PS1 style game!’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So there was only one thing for it, ripping out lots of how the physics was used.&lt;/p&gt;

&lt;p&gt;I fully backed out of simulated physics altogether and instead went back to basics just using colliders and rays for collision. Physics simulation now resides in the games lua scripts. What’s more, it’s super simple physics. As soon as this change was in the game started to feel much more akin to a 90s platformer. It also had the added bonus of being really easy to manage in the lua code.&lt;/p&gt;

&lt;h1 id=&quot;problem-1&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;The character looks great&lt;/strong&gt;
&lt;img src=&quot;/assets/Images/Blog/CharacterDetail.jpg&quot; alt=&quot;Chaos the devil hi-res vs low res&quot; class=&quot;blog-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A similar problem to above, however this time it was due to the character already being something I had created before the project. I always knew that the little critter was far far too complicated to be used without a very serious redesign.&lt;/p&gt;

&lt;h1 id=&quot;solution-1&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;I needed a reference point to work to here, and using the power of the internet I found that the original Crash Bandicoot model was just 512 polygons.&lt;/p&gt;

&lt;p&gt;I challenged myself to reduce my character to 512 polygons in Blender. This is much harder than you may think. I had to deliberate over each polygon, in order to keep the character essence intact. The face was the most important part here, I needed to keep those expressive eyes, but everything else got heavily reduced in detail.&lt;/p&gt;

&lt;p&gt;Crash Bandicoot had to deal with serious hardware limitations which lead the devs to use a vertex animation style. I am hoping to gain some development ground here by relying on the fact I am not running on a PS1, it just has to look PS1 like. So I had another consideration, there needed to be enough vertex info around the joints to not give terrible creasing.&lt;/p&gt;

&lt;p&gt;The last issue of texturing the character also took from Crash Bandicoot. Originally the model I used was textured using the standard approach of diffusemap, normalmap and materialmap. All these were thrown out and simple vertex colouring was used. This had a few wins:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;In my opinion it hit the desired aesthetic right on the nose.&lt;/li&gt;
  &lt;li&gt;Creating assets that are vertex coloured rather than texturemapped is so much quicker.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;problem-2&quot;&gt;Problem&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Graphics looking nice and crisp!&lt;/strong&gt;
&lt;img src=&quot;/assets/Images/Blog/Hi-res-dev.jpg&quot; alt=&quot;Chaos the devil pre alpha hi res&quot; class=&quot;blog-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sort of counterintuitively, it takes effort to render badly these days. Textures look interpolate pretty nicely, resolutions even without AA look pretty good, vertex position interpolation is great, depthbuffer does a great job of displaying only pixels visible to the player. This was not the case in PS1 days, so it all has to change.&lt;/p&gt;

&lt;h1 id=&quot;solution-2&quot;&gt;Solution&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/Images/Blog/Low-res-dev.jpg&quot; alt=&quot;Chaos the devil pre alpha low res&quot; class=&quot;blog-img&quot; /&gt;
I was always aware this was going to be the case, and I am going to write a blog post solely on the techniques I used to achieve a similar look to PS1. Again, just as before, my aim was not to match the techniques of the PS1, which would obviously give me that PS1 style, but to still use more modern techniques to fake it. I am not trying to make my life too hard, this is a big project and I need to make up some ground in places.&lt;/p&gt;</content><author><name></name></author><category term="indiedev" /><category term="update" /><summary type="html">It is done, the game has reached vertical slice. The journey to this point was relatively smooth, but there were lots of design changes along the way as I decided to have a flexible game design. Problem The physics look great! Using Bullet Physics for my physics implementation gave great results. The player could run around with good looking momentum, kick down doors which would rebound slightly on impact and kick down walls of cubes which would dance around the screen. It was quite fun running around that little physics scene. Just one problem, physics like this doesn’t belong in a PS1 style game. Solution This was my first experience of Bullet Physics and to be honest I fell into a developer trap and got a little carried away. Before I knew it I had ended up deviating quite far from the type of game I set out to do. I didn’t want to change the aim and come up with a new idea such as. ‘A modern take on the old PS1 style game!’ So there was only one thing for it, ripping out lots of how the physics was used. I fully backed out of simulated physics altogether and instead went back to basics just using colliders and rays for collision. Physics simulation now resides in the games lua scripts. What’s more, it’s super simple physics. As soon as this change was in the game started to feel much more akin to a 90s platformer. It also had the added bonus of being really easy to manage in the lua code. Problem The character looks great A similar problem to above, however this time it was due to the character already being something I had created before the project. I always knew that the little critter was far far too complicated to be used without a very serious redesign. Solution I needed a reference point to work to here, and using the power of the internet I found that the original Crash Bandicoot model was just 512 polygons. I challenged myself to reduce my character to 512 polygons in Blender. This is much harder than you may think. I had to deliberate over each polygon, in order to keep the character essence intact. The face was the most important part here, I needed to keep those expressive eyes, but everything else got heavily reduced in detail. Crash Bandicoot had to deal with serious hardware limitations which lead the devs to use a vertex animation style. I am hoping to gain some development ground here by relying on the fact I am not running on a PS1, it just has to look PS1 like. So I had another consideration, there needed to be enough vertex info around the joints to not give terrible creasing. The last issue of texturing the character also took from Crash Bandicoot. Originally the model I used was textured using the standard approach of diffusemap, normalmap and materialmap. All these were thrown out and simple vertex colouring was used. This had a few wins: In my opinion it hit the desired aesthetic right on the nose. Creating assets that are vertex coloured rather than texturemapped is so much quicker. Problem Graphics looking nice and crisp! Sort of counterintuitively, it takes effort to render badly these days. Textures look interpolate pretty nicely, resolutions even without AA look pretty good, vertex position interpolation is great, depthbuffer does a great job of displaying only pixels visible to the player. This was not the case in PS1 days, so it all has to change. Solution I was always aware this was going to be the case, and I am going to write a blog post solely on the techniques I used to achieve a similar look to PS1. Again, just as before, my aim was not to match the techniques of the PS1, which would obviously give me that PS1 style, but to still use more modern techniques to fake it. I am not trying to make my life too hard, this is a big project and I need to make up some ground in places.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/Images/ChaosTheDevilCover.jpg" /><media:content medium="image" url="http://localhost:4000/assets/Images/ChaosTheDevilCover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chaos the devil announcement</title><link href="http://localhost:4000/indiedev/update/2021/08/11/chaos-the-devil-announcement.html" rel="alternate" type="text/html" title="Chaos the devil announcement" /><published>2021-08-11T10:20:01+00:00</published><updated>2021-08-11T10:20:01+00:00</updated><id>http://localhost:4000/indiedev/update/2021/08/11/chaos-the-devil-announcement</id><content type="html" xml:base="http://localhost:4000/indiedev/update/2021/08/11/chaos-the-devil-announcement.html">&lt;h1 id=&quot;what-is-the-game&quot;&gt;What is the game?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Chaos the devil&lt;/strong&gt; will aim to capture the spirit of the old school 3D platformers that were released on the original Playstation1.&lt;/p&gt;

&lt;p&gt;The game will be written alongside a new iteration of my own engine and will prove the new upgrades and features planned for the engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Images/Blog/Ps1Platformers.jpg&quot; alt=&quot;Playstation 1 Platformers&quot; class=&quot;blog-img&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-this-game&quot;&gt;Why this game?&lt;/h1&gt;
&lt;p&gt;Primarily I enjoy this kind of game, and I have fond memories of this era, but there are other considerations:&lt;/p&gt;

&lt;h2 id=&quot;3d-platformers-are-a-lot-of-work&quot;&gt;3D platformers are a lot of work!&lt;/h2&gt;
&lt;p&gt;I want to create a more &lt;strong&gt;ambitious game&lt;/strong&gt; in scope in order to test the new block loading capabilities of the new engine. I am but one person, I’m not about to write and 3D MMORPG, so I have to limit myself. 3D platformers of this era were not a walk in the park to develop, they took teams of people and millions of dollars to create. Naughty Dog even had the deep pockets of Universal behind their title Crash Bandicoot[1], so&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how do I think I have a chance of creating one?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This comparison is not fair, these teams were creating their games on unproven tech which required novel ways to get the performance for their games to run. In 2020 things are very different, tech is mature, systems run a heck of a lot faster and I have access to hours and hours of talks from developers outlining challenges which need to be considered and how they overcame them.&lt;/p&gt;

&lt;h2 id=&quot;3d-platformers-need-a-lot-of-art&quot;&gt;3D platformers need a lot of art!&lt;/h2&gt;
&lt;p&gt;True, and I’m not saying this project isn’t ambitious.&lt;/p&gt;

&lt;p&gt;Low poly models take less time and allow more leeway than modern HD. Texturing on the PS1 was also notoriously lousy, another aspect of this era which should allow me to shave some time off asset development.&lt;/p&gt;

&lt;p&gt;The graphics programming techniques required to support the assets will be much more simple than for modern titles. Previous projects ended up quickly getting frustrated with fancy graphical techniques, this made it difficult to pivot quickly in development, and could force me into optimisation much earlier than I wanted. This title will probably use vertex lighting with one light! This simplicity will allow me to reach for vertical slice within a year, manageable.&lt;/p&gt;

&lt;p&gt;I am aiming to create the levels using the block system that evolved within the last iteration of my engine. This method will feel rather like the level design of old titles such as DOOM, that is, no work will be needed to be done inside 3D software packages, the levels will be created by simple level blocks which can be shaped and textured.&lt;/p&gt;

&lt;p&gt;Characters will be the a large outlay of time here which is the correct focus for a 3D platformer of this era, especially the player character. The good news here is that I have already developed a character which I am going to use, I am sure it will undergo changes at it is far too hi-res to hit the correct look, but it gets be off the ground running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Images/LittleDevilCover.jpg&quot; alt=&quot;Chaos the devil asset&quot; class=&quot;blog-img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-story-work-required&quot;&gt;What about the story work required?&lt;/h2&gt;
&lt;p&gt;Do you remember the story of Crash Bandicoot? Probably can be summed up in a line:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some animal testing experiment goes wrong, now you are on the run?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What about Spyro?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some film crew are making a documentary and then dragons get turned to stone, but not Spyro, he has to save them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Croc in this instance had probably the best setup, with to be honest a very coherent intro.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fluff balls find baby crocodile in a basket, raise it. Bad guy shows up and takes the king of the fluff balls and so Croc wants to help his friend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically what I am saying is that story was never too central to these games, they didn’t make much sense. Another great aspect here is that the levels didn’t feel like they needed to make sense. There are huge drops to infinity across floating islands, lava everywhere and for some reason then everything turns to ice with no explanation in story.&lt;/p&gt;

&lt;h2 id=&quot;killer-soundtracks&quot;&gt;Killer soundtracks&lt;/h2&gt;
&lt;p&gt;Not sure if it’s just me, but I still listen to the soundtracks of these games even today. They were great, in fact all the audio design in these games was top notch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Oh dear&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My engine already boasts a really nice audio engine capable of loads of effects and 3D, everything that will be required to support this type of title. The issue is my skill when it comes to making audio is lacking.&lt;/p&gt;

&lt;p&gt;I have created the audio for previous titles and so I can certainly identify this is probably the area of greatest concern. I will give it a go, but I may have to outsource at least the music creation.&lt;/p&gt;

&lt;h1 id=&quot;milestones&quot;&gt;Milestones&lt;/h1&gt;
&lt;p&gt;I have a full time job in the games industry and a wife pregnant with twins at the moment so needless to say I will be working part time (very part time) on this, so the milestones are certainly going to be flexible. I am committing to no deadlines of any kind and will not be going down the crowdfunding routes.&lt;/p&gt;

&lt;p&gt;2021 - Vertical slice
All features work, the game can be run, all menus are functional and some test levels run. Artwork is looking in keeping with PS1 era, no grey box but not final.&lt;/p&gt;

&lt;p&gt;2022 - Public Alpha
The entire game works, all levels and assets are completed to an alpha standard. The game can be downloaded and tested by the public for feedback.&lt;/p&gt;

&lt;p&gt;2023 - Game Release v1
Game will be released probably initially on Windows and probably in one store. I will then slowly roll out release on other platforms and stores based on game reception.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;[1]Crash Bandicoot Dev Story&lt;/p&gt;</content><author><name></name></author><category term="indiedev" /><category term="update" /><summary type="html">What is the game? Chaos the devil will aim to capture the spirit of the old school 3D platformers that were released on the original Playstation1. The game will be written alongside a new iteration of my own engine and will prove the new upgrades and features planned for the engine. Why this game? Primarily I enjoy this kind of game, and I have fond memories of this era, but there are other considerations: 3D platformers are a lot of work! I want to create a more ambitious game in scope in order to test the new block loading capabilities of the new engine. I am but one person, I’m not about to write and 3D MMORPG, so I have to limit myself. 3D platformers of this era were not a walk in the park to develop, they took teams of people and millions of dollars to create. Naughty Dog even had the deep pockets of Universal behind their title Crash Bandicoot[1], so how do I think I have a chance of creating one? This comparison is not fair, these teams were creating their games on unproven tech which required novel ways to get the performance for their games to run. In 2020 things are very different, tech is mature, systems run a heck of a lot faster and I have access to hours and hours of talks from developers outlining challenges which need to be considered and how they overcame them. 3D platformers need a lot of art! True, and I’m not saying this project isn’t ambitious. Low poly models take less time and allow more leeway than modern HD. Texturing on the PS1 was also notoriously lousy, another aspect of this era which should allow me to shave some time off asset development. The graphics programming techniques required to support the assets will be much more simple than for modern titles. Previous projects ended up quickly getting frustrated with fancy graphical techniques, this made it difficult to pivot quickly in development, and could force me into optimisation much earlier than I wanted. This title will probably use vertex lighting with one light! This simplicity will allow me to reach for vertical slice within a year, manageable. I am aiming to create the levels using the block system that evolved within the last iteration of my engine. This method will feel rather like the level design of old titles such as DOOM, that is, no work will be needed to be done inside 3D software packages, the levels will be created by simple level blocks which can be shaped and textured. Characters will be the a large outlay of time here which is the correct focus for a 3D platformer of this era, especially the player character. The good news here is that I have already developed a character which I am going to use, I am sure it will undergo changes at it is far too hi-res to hit the correct look, but it gets be off the ground running. What about the story work required? Do you remember the story of Crash Bandicoot? Probably can be summed up in a line: Some animal testing experiment goes wrong, now you are on the run? What about Spyro? Some film crew are making a documentary and then dragons get turned to stone, but not Spyro, he has to save them. Croc in this instance had probably the best setup, with to be honest a very coherent intro. Fluff balls find baby crocodile in a basket, raise it. Bad guy shows up and takes the king of the fluff balls and so Croc wants to help his friend. Basically what I am saying is that story was never too central to these games, they didn’t make much sense. Another great aspect here is that the levels didn’t feel like they needed to make sense. There are huge drops to infinity across floating islands, lava everywhere and for some reason then everything turns to ice with no explanation in story. Killer soundtracks Not sure if it’s just me, but I still listen to the soundtracks of these games even today. They were great, in fact all the audio design in these games was top notch. Oh dear My engine already boasts a really nice audio engine capable of loads of effects and 3D, everything that will be required to support this type of title. The issue is my skill when it comes to making audio is lacking. I have created the audio for previous titles and so I can certainly identify this is probably the area of greatest concern. I will give it a go, but I may have to outsource at least the music creation. Milestones I have a full time job in the games industry and a wife pregnant with twins at the moment so needless to say I will be working part time (very part time) on this, so the milestones are certainly going to be flexible. I am committing to no deadlines of any kind and will not be going down the crowdfunding routes. 2021 - Vertical slice All features work, the game can be run, all menus are functional and some test levels run. Artwork is looking in keeping with PS1 era, no grey box but not final. 2022 - Public Alpha The entire game works, all levels and assets are completed to an alpha standard. The game can be downloaded and tested by the public for feedback. 2023 - Game Release v1 Game will be released probably initially on Windows and probably in one store. I will then slowly roll out release on other platforms and stores based on game reception. References [1]Crash Bandicoot Dev Story</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/Images/Blog/Ps1Platformers.jpg" /><media:content medium="image" url="http://localhost:4000/assets/Images/Blog/Ps1Platformers.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hawkengine development started</title><link href="http://localhost:4000/indiedev/update/2021/05/11/Hawkengine.html" rel="alternate" type="text/html" title="Hawkengine development started" /><published>2021-05-11T10:20:01+00:00</published><updated>2021-05-11T10:20:01+00:00</updated><id>http://localhost:4000/indiedev/update/2021/05/11/Hawkengine</id><content type="html" xml:base="http://localhost:4000/indiedev/update/2021/05/11/Hawkengine.html">&lt;p&gt;It is time to do something that I have been wanting to do for ages, make some fundamental changes to my engine.&lt;/p&gt;

&lt;p&gt;I am not one for small tech demos, I don’t find it too interesting to see a single rendered room with some fabric flying around.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A single room rendered a game does not make.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I will be developing a game along side the development of the new engine tech, to prove the systems as they are created.&lt;/p&gt;

&lt;h1 id=&quot;quick-overview-of-last-tech&quot;&gt;Quick overview of last tech&lt;/h1&gt;

&lt;p&gt;My last engine went through quite a few design changes and experiments while it moved through development. Some ideas worked well, other ideas not.&lt;/p&gt;

&lt;h3 id=&quot;things-that-worked-well&quot;&gt;Things that worked well&lt;/h3&gt;
&lt;p&gt;On the whole I was happy with what I achieved with the previous generation of engine. The main drawbacks came from legacy decisions when the project had different focuses. Originally the first lines of code were created for a specific commissioned project which eventually never saw the light of day.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Component lead system. Everything had the same base which made things nice to work with in the engine. This is easier said than done with the vast differences in components required to make a game, but a good balance was found.&lt;/li&gt;
  &lt;li&gt;Block system kept components grouped in a logical order and made it simple to bring in entire sections from other game implementations built using the engine.&lt;/li&gt;
  &lt;li&gt;Script support for components was added late but eventually became central to everything.&lt;/li&gt;
  &lt;li&gt;Completely flexible video buffer support which allowed total control of graphics pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;things-that-didnt-work-so-well&quot;&gt;Things that didn’t work so well&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The shader system was initially too inflexible, as a later addition I started to open this up which lead to some messy implementation in order to keep other projects working.&lt;/li&gt;
  &lt;li&gt;Python as a scripting engine was a pain! I found myself dealing with Python more and more when switching systems, operating systems and especially when porting over to mobile devices. What’s more I didn’t need the power it gave me.&lt;/li&gt;
  &lt;li&gt;Authoring tool was written in c#. Firstly annoying when I developed on Linux at times. Secondly annoying as the engine is written to be completely cross platform in c++.&lt;/li&gt;
  &lt;li&gt;Single threaded. Not entirely true, there were parts of the engine which used threads, but they were not central to the design of the engine, just standalone async implementations within components.&lt;/li&gt;
  &lt;li&gt;UI built into the engine. Worked well but I think it belongs outside of the engine scope to keep the engine manageable.&lt;/li&gt;
  &lt;li&gt;Coding everything from scratch is unnecessary and too hard to manage. Initially this was a good idea to get a deep understanding of how lots of things worked, but now it is just reinventing the wheel and keeping this code maintained was a time drain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-will-be-the-biggest-changes&quot;&gt;What will be the biggest changes&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Scripting will be central to all engine components, rather than optional.&lt;/li&gt;
  &lt;li&gt;Python is out, Lua is in. Much easier to manage.&lt;/li&gt;
  &lt;li&gt;XML out, files in. This sounds a bit odd but here is a quick explanation. Each component will now be represented a script file just stored in a folder in dev mode.&lt;/li&gt;
  &lt;li&gt;External libs will be used as much as possible for the implementation of interfaces. This will allow me to keep focus on engine design.&lt;/li&gt;
  &lt;li&gt;Resources will be optimised and loaded differently in deployment mode. Using external libs for data loading will lead to the data being in inefficient structures. This will probably be good for debugging and so will be used in a dev mode, but a deployment version of the assets will be created for the deployed game.&lt;/li&gt;
  &lt;li&gt;Engine will be substantially different and so requires a full authoring rewrite, this time QT will be used using an open source model. As the tool will be then in C++ it will be simple to add much more analytic functionality into it which was seriously lacking previously.&lt;/li&gt;
  &lt;li&gt;The engine already lends itself to an async structure, this threaded approach will be central and built into the core of the engine.&lt;/li&gt;
  &lt;li&gt;The previous engine had a graphics implementation of OpenGL which worked really well, but with the focus on async I really would like to offer a Vulkan path too. It is also something that I really want to play with in more than a demo situation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-makes-this-engine-different&quot;&gt;What makes this engine different?&lt;/h1&gt;
&lt;p&gt;This engine is very verbose, it doesn’t even create a window for you unless you specify that a window manager component is required.&lt;/p&gt;

&lt;p&gt;The engine doesn’t have an editor UI built in. I will create a basic UI to go along with the engine that will be able to interface and embed the engine render output, however, this is not part of the engine project itself, the engine is standalone to keep a manageable focused project. The idea is that each project will probably create a bespoke editor solution designed for the specific purpose, rather than a general purpose frontend. Small projects for example may not even require a frontend, they may not even need to display anything in a window and require a vastly different style UI.&lt;/p&gt;

&lt;p&gt;The idea is to totally divorce between engine and tools, this engine is more designed for engine programmers specifically, and offers a clear demarcation between the worlds of engine and tools.&lt;/p&gt;</content><author><name></name></author><category term="indiedev" /><category term="update" /><summary type="html">It is time to do something that I have been wanting to do for ages, make some fundamental changes to my engine.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/Images/CoverAAA.jpg" /><media:content medium="image" url="http://localhost:4000/assets/Images/CoverAAA.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>